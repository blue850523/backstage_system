<template>
    <TCModal class="edit_form" id="edit_form" :title="UI.title" ref="modal" :dialog_width="'1600px'" :modal-body-style="{'min-height': 'fit-content', 'overflow': 'auto'}">
        <template #body>
            <div class="row g-0">
                <div class="col-3">
                    <div class="form-group row nopadding">
                        <div class="col-4 nopadding">
                            <label class="control-label">select</label>
                        </div>
                        <div class="col-5 nopadding">
                            <select class="form-select">
                                <option value="1">One</option>
                                <option value="2">Two</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="col-3">
                    <div class="form-group row nopadding">
                        <div class="col-4 nopadding">
                            <label class="control-label">input</label>
                        </div>
                        <div class="col-5 nopadding">
                            <input class="form-control" placeholder="">
                        </div>
                    </div>
                </div>
            </div>
        </template>

        <template #footer>
            <button class="btn btn-new4" type="button" @click="save()" v-if="!is_detail">{{ is_create ? "提交" : "儲存" }}</button>
            <button class="btn btn-new4" type="button" @click="hide()">離開</button>
        </template>
    </TCModal>
</template>

<script>
import TCModal from "@/components/tc_components/tc-modal.vue";

const API = {
    // api: `${process.env.VUE_APP_DEV_LARAVEL}/api/`,
};

export default {
    name: "edit_form",
    components: {
        TCModal,
    },
    data: function () {
        return {
            UI: {
                title: "",
                title_create: "",
                title_edit: "",
                title_detail: "",
            },
            location_id: sessionStorage["location_id"],
            is_create: false,
            is_detail: false,
            record: {},
        }
    },
    methods: {
        create_record () {
            this.is_create = true;
            this.UI.title = this.UI.title_create;
            return this.show();
        },
        edit_record () {
            this.is_create = false;
            this.UI.title = this.UI.title_edit;
            return this.show();
        },
        detail_record () {
            this.is_create = false;
            this.UI.title = this.UI.title_detail;
            return this.show();
        },
        async validates () {
            let check = true;

            check = check_form_is_valid($(this.$el), true);

            return check;
        },
        async save () {
            let is_valid = await this.validates();
            if (!is_valid) {
                return;
            }

            try {
                let response = await this.axios.post(API.api, {

                }).then((res) => res);

                if (response.status == 200) {
                    this.hide(1);
                } else {
                    await SysUI.alert(this.UI.title, response.data.message);
                    return;
                }
            } catch (error) {
                console.log("error", error.response);
                await SysUI.alert(this.UI.title, error.response.data.message);
                return;
            }
        },
        show () {
            return this.$refs.modal.show();
        },
        hide (need_refresh = 0) {
            this.reset();
            return this.$refs.modal.hide(need_refresh);
        },
        reset () {
            Object.assign(this.$data, this.$options.data());
            remove_form_has_error($(this.$el));
        }
    }
}
</script>

<style lang="scss" scoped>

</style>